from idlelib.colorizer import ColorDelegator
from idlelib.percolator import Percolator
from tkinter import *
from collections import deque
from customtkinter import *


class Window:
    def __init__(self, master):
        self.master = master
        self.master.option_add("*Font", "Verdana 12")

        self.Main = Frame(self.master, background="#1d1d1d")

        self.stack = deque(maxlen=10)
        self.stackcursor = 0

        self.L1 = Label(self.Main, text="SQL EDITOR", background="#1d1d1d", foreground="cyan")
        self.L1.pack(padx=5, pady=5)

        # ---------

        self.T1 = Text(self.Main, width=90, height=25, background="#1b1b1b", foreground="white", insertbackground="cyan", font=("Futura", 15))
        self.T1.focus_set()

        scrollbar = CTkScrollbar(self.Main, command=self.T1.yview)
        scrollbar.pack(side=RIGHT, fill=Y)

        self.T1.tag_configure("orange", foreground="orange", font=("Futura", 15))
        self.T1.tag_configure("blue", foreground="blue", font=("Futura", 15))
        self.T1.tag_configure("purple", foreground="purple", font=("Futura", 15))
        self.T1.tag_configure("green", foreground="green", font=("Futura", 15))
        self.T1.tag_configure("red", foreground="red", font=("Futura", 15))

        self.tags = ["purple", "blue", "purple", "green", "red"]

        self.wordlist = [["CREATE", "PRIMARY", "KEY", "NOT", "INTEGER", "SELECT",
                          "WHERE", "FROM", "INTO", "VALUES", "ADD", "ADD-CONSTRAINT", "ALL", "ALTER", "ALTER COLUMN", "ALTER TABLE"
                        , "ANY", "CASE", "CHECK", "VIEW", "AS", "UPDATE", "IS NULL",
                          "IS NOT NULL", "JOIN", "LEFT JOIN", "LIKE", "LIMIT", "NOT NULL", "INSERT INTO SELECT",
                          "INSERT INTO", "INNER JOIN", "HAVING", "FULL OUTER JOIN", "EXISTS", "EXEC",
                          "FOREIGN KEY", "DROP INDEX", "DROP DATABASE", "DROP DEFAULT", "DROP", "TABLE", "SCHEMA"],

                         ["create", "primary", "key", "not", "integer", "select",
                          "where", "from", "into", "values", "add", "add-constraint", "all", "alter", "alter column",
                          "alter table"
                             , "any", "case", "check", "view", "as", "update", "is null",
                          "is not null", "join", "left join", "like", "limit", "not null", "insert into select",
                          "insert into", "inner join", "having", "full outer join", "exists", "exec",
                          "foreign key", "drop index", "drop database", "drop default", "drop", "table", "schema"],


                         ["INTEGER", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TEXT", "BLOB", "MEDIUMTEXT", "LONGTEXT", "LONGBLOB", "ENUM"
                          , "BIT", "TINYINT", "BOOL", "BOOLEAN", "SMALLINT", "MEDIUMINT", "BIGINT", "DOUBLE PRECISION", "DECIMAL", "DEC", "FLOAT", "INT"],


                         ["pygame", "tkinter", "sys", "os", "mysql"],
                         ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]]

        self.T1.bind("<Return>", lambda event: self.indent(event.widget))

        self.T1.pack(padx=5, pady=5)

        # ---------



        self.Main.pack(padx=5, pady=5)

        cdg = ColorDelegator()
        cdg.tagdefs['STRING'] = {'foreground': '#95e7ad', 'background': '#1d1d1d'}
        Percolator(self.T1).insertfilter(cdg)

    def tagHighlight(self):
        start = "1.0"
        end = "end"

        for mylist in self.wordlist:
            num = int(self.wordlist.index(mylist))

            for word in mylist:
                self.T1.mark_set("matchStart", start)
                self.T1.mark_set("matchEnd", start)
                self.T1.mark_set("SearchLimit", end)

                mycount = IntVar()

                while True:
                    index = self.T1.search(word, "matchEnd", "SearchLimit", count=mycount, regexp=False)

                    if index == "": break
                    if mycount.get() == 0: break

                    self.T1.mark_set("matchStart", index)
                    self.T1.mark_set("matchEnd", "%s+%sc" % (index, mycount.get()))

                    preIndex = "%s-%sc" % (index, 1)
                    postIndex = "%s+%sc" % (index, mycount.get())

                    if self.check(index, preIndex, postIndex):
                        self.T1.tag_add(self.tags[num], "matchStart", "matchEnd")

    def check(self, index, pre, post):
        letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p",
                   "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

        if self.T1.get(pre) == self.T1.get(index):
            pre = index
        else:
            if self.T1.get(pre) in letters:
                return 0

        if self.T1.get(post) in letters:
            return 0

        return 1

    def scan(self):
        start = "1.0"
        end = "end"
        mycount = IntVar()

        regex_patterns = [r'".*"', r'#.*']

        for pattern in regex_patterns:
            self.T1.mark_set("start", start)
            self.T1.mark_set("end", end)

            num = int(regex_patterns.index(pattern))

            while True:
                index = self.T1.search(pattern, "start", "end", count=mycount, regexp=True)

                if index == "": break

                if num == 1:
                    self.T1.tag_add(self.tags[4], index, index + " lineend")
                elif num == 0:
                    self.T1.tag_add(self.tags[3], index, "%s+%sc" % (index, mycount.get()))

                self.T1.mark_set("start", "%s+%sc" % (index, mycount.get()))

    def indent(self, widget):

        index1 = widget.index("insert")
        index2 = "%s-%sc" % (index1, 1)
        prevIndex = widget.get(index2, index1)

        prevIndentLine = widget.index(index1 + "linestart")
        print("prevIndentLine ", prevIndentLine)
        prevIndent = self.getIndex(prevIndentLine)
        print("prevIndent ", prevIndent)

        if prevIndex == ":":
            widget.insert("insert", "\n" + "     ")
            widget.mark_set("insert", "insert + 1 line + 5char")

            while widget.compare(prevIndent, ">", prevIndentLine):
                widget.insert("insert", "     ")
                widget.mark_set("insert", "insert + 5 chars")
                prevIndentLine += "+5c"
            return "break"

        elif prevIndent != prevIndentLine:
            widget.insert("insert", "\n")
            widget.mark_set("insert", "insert + 1 line")

            while widget.compare(prevIndent, ">", prevIndentLine):
                widget.insert("insert", "     ")
                widget.mark_set("insert", "insert + 5 chars")
                prevIndentLine += "+5c"
            return "break"

    def getIndex(self, index):
        while True:
            if self.T1.get(index) == " ":
                index = "%s+%sc" % (index, 1)
            else:
                return self.T1.index(index)

    def update(self):
        self.stackify()
        self.tagHighlight()
        self.scan()

    def stackify(self):
        self.stack.append(self.T1.get("1.0", "end - 1c"))
        if self.stackcursor < 9: self.stackcursor += 1



root = CTk()
window = Window(root)
root.bind("<Key>", lambda event: window.update())
root.mainloop()
